#!/usr/bin/env bash

set -eE

info() {
    echo -e "${COLOR_ORANGE}  + ${1}${COLOR_RESET}"
}

error() {
     echo -e "${COLOR_RED}  + ${1}${COLOR_RESET}"
}

obs-deps-fetch-main() {
    if [ $# -ne 3 ]; then
        error "Usage: github_fetch GITHUB_USER GITHUB_REPOSITORY GITHUB_COMMIT_HASH"
        return 1
    fi

    GH_USER="${1}"
    GH_REPO="${2}"
    GH_REF="${3}"

    if [ -d "./.git" ]; then
        info "Repository ${GH_USER}/${GH_REPO} already exists, updating..."
        git config advice.detachedHead false
        git config remote.origin.url "https://github.com/${GH_USER}/${GH_REPO}.git"
        git config remote.origin.fetch "+refs/heads/master:refs/remotes/origin/master"
        git config remote.origin.tapOpt --no-tags

        if ! git rev-parse -q --verify "${GH_COMMIT}^{commit}"; then
            git fetch origin
        fi

        git checkout -f "${GH_REF}" --
        git reset --hard "${GH_REF}" --
        if [ -d "./.gitmodules" ]; then
            git submodule foreach --recursive git submodule sync
            git submodule update --init --recursive
        fi

    else
        git clone "https://github.com/${GH_USER}/${GH_REPO}.git" $(pwd)
        git config advice.detachedHead false
        info "Checking out commit ${GH_REF}.."
        git checkout -f "${GH_REF}" --

        if [ -d "./.gitmodules" ]; then
            git submodule foreach --recursive git submodule sync
            git submodule update --init --recursive
        fi
    fi
}

obs-deps-fetch-main $*